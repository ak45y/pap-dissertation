---
title: "create-variables-of-interest for temperature data"
format: html
editor: visual
---

####### This script takes the dataframe created in the previous data-processing file (1.1) that extracted daily climate data for each PSU and then creates climate related variables - first for each day and the summarizes that at the PSU level.

# load-packages

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(data.table)
library(summarytools)
library(beepr)
```

# Create temperature based variables
```{r}
system.time(
  df_psu_tmax_tmin_temp_vars_added <- df_psu_tmax_tmin[, hotday_35 := ifelse(max_temp > 35, 1, 0)
      ][
        , hotnight_20 := ifelse(min_temp > 20, 1, 0)
      ][
        , long_term_avg_tmax := mean(max_temp, na.rm = T), by = psu
      ][
        , long_term_avg_tmin := mean(min_temp, na.rm = T), by = psu
      ][
        , hotday_long_avg_tmax := ifelse(max_temp > long_term_avg_tmax+5, 1, 0)
      ][
        , hotday_long_avg_tmin := ifelse(min_temp > long_term_avg_tmin+5, 1, 0)
      ][
        , cutoff_hot_95 := quantile(max_temp, probs = 0.95, na.rm = T), by = psu
      ][
        , hotday_95 := ifelse(max_temp >=  cutoff_hot_95, 1, 0)
      ][
        , hotday_35_95 := ifelse(hotday_35 == 1 | hotday_95 == 1, 1, 0)
      ][
        , hotday_both := ifelse((hotday_35 == 1 & hotday_95 == 1), 1, 0)
      ]
      # Consecutive days
      [
        , consec_nights_20 := ifelse(min_temp > 20, 1:.N, 0L), by = rleid(min_temp > 20)
      ][
        , consec_days_35 := ifelse(max_temp > 35, 1:.N, 0L), by = rleid(max_temp > 35)
      ][
        , consec_days_lt_avg_tmax := ifelse(hotday_long_avg_tmax == 1, 1:.N, 0L), by = rleid(hotday_long_avg_tmax == 1)
      ][
        , consec_days_lt_avg_tmin := ifelse(hotday_long_avg_tmin == 1, 1:.N, 0L), by = rleid(hotday_long_avg_tmin == 1)
      ][
        , consec_days_95 := ifelse(hotday_95 == 1, 1:.N, 0L), by = rleid(hotday_95 == 1)
      ][
        , consec_days_35_95 := ifelse(hotday_35_95 == 1, 1:.N, 0L), by = rleid(hotday_35_95 == 1)
      ][
        , consec_days_both := ifelse(hotday_both == 1, 1:.N, 0L), by = rleid(hotday_both == 1)
      ]
      # Number of consecutive days
      [
      , num_consec_hot_nights_20_2 := ifelse(consec_nights_20 > 2, 1, 0), by = psu
      ][
      , num_consec_hot_days_35_3 := ifelse(consec_days_35 > 2, 1, 0), by = psu
      ][
      , num_consec_hot_days_35_5 := ifelse(consec_days_35 > 4, 1, 0), by = psu
      ][
      , num_consec_hot_days_95_3 := ifelse(consec_days_95 > 2, 1, 0), by = psu
      ][
      , num_consec_hot_days_95_5 := ifelse(consec_days_95 > 4, 1, 0), by = psu  
      ][
      , num_consec_long_avg_tmax_3 := ifelse(consec_days_lt_avg_tmax > 2, 1, 0), by = psu  
      ][
      , num_consec_long_avg_tmax_5 := ifelse(consec_days_lt_avg_tmax > 4, 1, 0), by = psu
      ][
      , num_consec_long_avg_tmin_3 := ifelse(consec_days_lt_avg_tmin > 2, 1, 0), by = psu  
      ][
      , num_consec_long_avg_tmin_5 := ifelse(consec_days_lt_avg_tmin > 4, 1, 0), by = psu
      ]
)
beep(sound = 3)
```

## Save your work

```{r}
save(df_psu_tmax_tmin_temp_vars_added, file = "./bigdata/images-paper-1/1.2-a-dhs-psu-all-temp-vars-created-daily.RData")
beep(sound = 5)
```

# Filter dataset to period of interest

## Define period of interest
```{r}
start_date = as.Date("2022-01-01")
end_date = as.Date("2022-12-31")
```

## Apply the filter
```{r}
df_psu_tmax_tmin_2022 <- df_psu_tmax_tmin_temp_vars_added[date >= as.IDate(start_date) & date <= as.IDate(end_date)]
dim(df_psu_tmax_tmin_2022)
```

# aggregate data at PSU level
```{r}
df_psu_tmax_tmin_2022_psu <- df_psu_tmax_tmin_2022[,
                  .(lat = first(lat),
                    long = first(long),
                    max_temp_avg = mean(max_temp, na.rm = T),
                    min_temp_avg = mean(min_temp, na.rm = T),
                    tmax_long_term_avg_tmax = mean(long_term_avg_tmax, na.rm = T),
                    num_hotday_long_avg_tmax = sum(hotday_long_avg_tmax, na.rm = T),
                    num_hotnight_20 = sum(hotnight_20, na.rm = T),
                    num_hotday_35 = sum(hotday_35, na.rm = T),
                    num_hotday_95 = sum(hotday_95, na.rm = T),
                    num_hotday_35_or_95 = sum(hotday_35_95, na.rm = T),
                    num_hotday_35_and_95 = sum(hotday_both, na.rm = T),
                    num_consec_hotdays_35_3 = sum(num_consec_hot_days_35_3, na.rm = T),
                    num_consec_hotdays_35_5 = sum(num_consec_hot_days_35_5, na.rm = T),
                    num_consec_hotdays_95_3 = sum(num_consec_hot_days_95_3, na.rm = T),
                    num_consec_hotdays_95_5 = sum(num_consec_hot_days_95_5, na.rm = T),
                    num_consec_long_avg_tmax_3 = sum(num_consec_long_avg_tmax_3, na.rm = T),
                    num_consec_long_avg_tmax_5 = sum(num_consec_long_avg_tmax_5, na.rm = T)), 
                  by = psu]
head(df_psu_tmax_tmin_2022_psu)
beep(sound = 3)
```

## Create categories for number of hot days

### Num hotdays - 35
```{r}
df_psu_hotdays <- df_psu_tmax_tmin_2022_psu %>% 
  mutate(num_hotday_35_cat = 
           case_when(
              num_hotday_35 == 0 ~ "None",
              num_hotday_35 > 0 & num_hotday_35 < 31 ~ "31 days or less",
              num_hotday_35 > 30 & num_hotday_35 < 91 ~ "31-90 days",
              num_hotday_35 > 90 & num_hotday_35 < 121 ~ "91-120 days",
              num_hotday_35 > 120  ~ "More than 120 days")) %>% 
  mutate(num_hotday_35_cat = fct_relevel(num_hotday_35_cat, 
                                              "None", "31 days or less", 
                                              "31-90 days", "91-120 days", 
                                              "More than 120 days"))  

freq(df_psu_hotdays$num_hotday_35_cat)
# hist(df_psu_hotdays$num_hot_days_35)
```

### Num hotdays - 95

```{r}
df_psu_hotdays <- df_psu_hotdays %>% 
  mutate(num_hotday_95_cat = 
           case_when(
              num_hotday_95 == 0 ~ "None",
              num_hotday_95 > 0 & num_hotday_95 < 11 ~ "10 days or less",
              num_hotday_95 > 10 & num_hotday_95 < 21 ~ "11-20 days",
              num_hotday_95 > 20 & num_hotday_95 < 31 ~ "21-30 days",
              num_hotday_95 > 30  ~ "More than 30 days")) %>% 
  mutate(num_hotday_95_cat = fct_relevel(num_hotday_95_cat, 
                                              "None", "10 days or less", 
                                              "11-20 days", "21-30 days", 
                                              "More than 30 days"))  
freq(df_psu_hotdays$num_hotday_95_cat)
```

### Num hotdays - both

```{r}
df_psu_hotdays <- df_psu_hotdays %>% 
  mutate(num_hotday_both_cat = 
           case_when(
              num_hotday_both == 0 ~ "None",
              num_hotday_both > 0 & num_hotday_both < 11 ~ "10 days or less",
              num_hotday_both > 10 & num_hotday_both < 21 ~ "11-20 days",
              num_hotday_both > 20 & num_hotday_both < 31 ~ "21-30 days",
              num_hotday_both > 30  ~ "More than 30 days")) %>% 
  mutate(num_hotday_both_cat = fct_relevel(num_hotday_both_cat, 
                                              "None", "10 days or less", 
                                              "11-20 days", "21-30 days", 
                                              "More than 30 days"))  
freq(df_psu_hotdays$num_hotday_both_cat)
```

# Save your work

## Save CSV

```{r}
write.csv(df_psu_hotdays, "./data/dhs-psu_level_heat_outcomes.csv")
```
