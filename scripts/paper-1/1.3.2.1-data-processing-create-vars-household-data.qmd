---
title: "Process variables in the HH dataset"
format: html
---

## Run the read-data script
```{r run-code-to-read-hh-data, message=FALSE, warning=FALSE}
runAllChunks("./scripts/paper-1/1.3.2-data-processing-read-household-raw-data.qmd")
beep(sound = 3)
```

# View the dataframe with variable names and labels
```{r}
View(df_names_labels_HH)
```

# rename variables
```{r rename-vars}
df_dhs_HH <-  setnames(df_dhs_HH_raw_dt, 
                       old = c("hv021"), 
                       new = c("psu"))
```

# Drop cases
```{r}
df_dhs_HH_valid <- df_dhs_HH[hv204 != "don't know"] # time to get water: 480 cases dropped
```

# Create new variables

## water sources and cooking fuel

```{r}
df_dhs_HH_ana <- df_dhs_HH_valid[, 
  # time to get water
  water_time_mins := ifelse(hv204 == "on premises", 0, as.numeric(hv204))
  ][, ':=' (
  # water more than 15 mins away  
  water_more_than_15 = ifelse(water_time_mins > 15, 1, 0),  
  # water not available for at least one full day in the past 2 weeks
  water_na_for_a_day_past_2_weeks = ifelse(sh37b == "yes", 0, 1),
  # source of drinking water
  water_source = fcase(
    str_detect(as.character(hv201), "pipe"), 1,
    str_detect(as.character(hv201), "bottled"), 1,
    str_detect(as.character(hv201), "plant"), 1,
    str_detect(as.character(hv201), "well"), 2,
    str_detect(as.character(hv201), "river"), 3,
    str_detect(as.character(hv201), "rain"), 3,
    str_detect(as.character(hv201), "spring"), 3,
    default = 4),
  # cooking fuel
  cook_fuel = ifelse((hv226 == "electricity" | hv226 == "lpg" | hv226 == "natural gas" | 
      hv226 == "biogas" | hv226 == "no food cooked in house") == 1, 0, 1)
  )]
```
## Amenities and wealth index
```{r}
df_dhs_HH_ana <- df_dhs_HH_ana[, ':=' (
  # has electricity
  amen_no_electricity = ifelse(hv206 == "yes", 0, 1),
  # has fridge
  amen_no_fridge = ifelse(hv209 == "yes", 0, 1),
  # has AC or fan
  amen_no_fan_ac = ifelse((sh50q == "yes" | sh50g == "yes"), 0, 1),
  # poorest wealth quintile
  sli_poorest = ifelse(hv270a == "poorest", 1, 0),
  # place of residence 
  urban = ifelse(hv025 == "rural", 0, 1) 
)]
```


## household members, space shared etc.
```{r}
df_dhs_HH_ana <- df_dhs_HH_ana[, ':=' (
  # number of members in HH
  num_mem_tot = hv009,
  # number of rooms for sleeping
  num_rooms_sleep = as.numeric(hv216)
)][
  # Number of members per room
  , num_mem_per_room := num_mem_tot/num_rooms_sleep
][
  # number of members as a categorical var
  , num_mem_per_room_3 := ifelse(num_mem_per_room > 3, 1, 0)
][
  , hh_head_not_male := ifelse(hv219 != "male", 1, 0)
]
```

## demographic

### number of members older than 65

#### First create a dataframe for all age variables and convert age from a factor to a numeric variable

```{r}
# Using dplyr
age_cols <- grep("hv105", names(df_dhs_HH_ana), value = TRUE)
df_age <- df_dhs_HH_ana[, ..age_cols]

# Using sapply and a custom function
## the function
# as.double.factor <- function(x) {as.numeric(levels(x))[x]}
## Using sapply
df_age <- sapply(df_age, as.double.factor)
df_age <- as.data.table(unlist(df_age))
# class(df_age)
```

#### Calculate number of members older than 65
```{r}
df_age <- df_age[, num_mem_65 := rowSums(.SD >= 65 & !is.na(.SD)), 
                               .SDcols = hv105_01:hv105_35]

freq(df_age$num_mem_65)
```


#### merge that back into the original data
```{r}
length(df_age$num_mem_65)
nrow(df_dhs_HH_ana)

df_dhs_HH_ana$num_mem_65 <- df_age$num_mem_65 
```

## Caste and access to healthcare
```{r}
df_dhs_HH_ana <- df_dhs_HH_ana[, ':=' (
  # scheduled caste
  sc = ifelse(sh49 == "scheduled caste", 1, 0),
  # has health insurance
  health_insurance = ifelse(sh71 == "yes", 0 , 1),
  # reports no nearby health facility
  no_public_fac = ifelse(sh74a == "no" | is.na(sh74a), 0, 1)
)]

```


## Educational Attainment

### Identify household members who are older than 10 years and have not completed 5 years of education
```{r}
freq(df_dhs_HH_ana$hv109_01)
df_test <- df_dhs_HH_ana[, .(hv105_05, hv106_05, hv107_05, hv108_05, hv109_05)]
View(df_test)
```

#### Create a subset of data with only age and education variables
```{r}
# first create a uid
df_dhs_HH_ana <- df_dhs_HH_ana[, uid := 1:.N]

# then create a vector with the variables I want to extact
age_edu_vars <- grep("uid|hv105|hv108", names(df_dhs_HH_ana), value = T)

# now subset the columns in data.table
df_age_edu <- df_dhs_HH_ana[, ..age_edu_vars, with = FALSE]
View(df_age_edu)
```

#### Now reshape them from wide to long
```{r}
df_age_edu_long <- melt(df_age_edu, 
                        measure.vars = patterns("^hv105", "^hv108"),
                        value.name = c("age", "edu_attainment"))

View(df_age_edu_long)
```



## anemic
```{r}
freq(df_dhs_HH_ana$hb57_01)
```







```{r}
freq(as.numeric(levels(df_dhs_HH_ana$hv105_01))[df_dhs_HH_ana$hv105_01], totals = FALSE, cumul = F)
freq(df_dhs_HH_ana$hv105_01)
```





