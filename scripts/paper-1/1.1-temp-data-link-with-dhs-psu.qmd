---
title: "Create a data frame that connects geo-coded DHS PSUs with climate data"
format: html
editor: visual
---

####### This script reads the geocoded PSU data from DHS and extracts daily gridded climate data for the past n years for each PSU. The result is a HUGE dataset where each PSU has n\*365 rows of data, where n is the number of years of climate data available.

# Load Packages

```{r load-packages, message=FALSE, warning=FALSE}
library(tidyverse)
library(data.table)
library(beepr)
```

# Step-1: Read geo-coded PSU data from DHS

## Load raw data

```{r read-geo}
library(sf)
df_dhs_geo_raw <- read_sf("../../common-datasets/india-nfhs-5/geographic-data/IAGE7AFL.shp")
nrow(df_dhs_geo_raw)
```

## Select relevant variables and filter out absurd geocodes

```{r select-and-filter-geo}
df_dhs_geo <- df_dhs_geo_raw %>% 
  dplyr::select(psu = DHSCLUST,
                lat = LATNUM, long = LONGNUM) %>% 
  dplyr::filter(!is.na(lat)) %>% 
  dplyr::filter(!is.na(long)) %>% 
  dplyr::filter(lat!=0 | long!=0) %>%                  #LAT=0 and LONG=0 are missing coordinates  
  dplyr::filter(lat <= -0.00005 | long >= 0.00005)      #missing obs. - remove
  
nrow(df_dhs_geo)
```

## Create a Spatial Points Dataframe for DHS PSUs

```{r}
library(sf)
df_dhs_psu_geo_spdf <- sf::as_Spatial(df_dhs_geo)
```

# Step-2: Get India Administrative Boundaries

## Load adm-1 for India

```{r}
library(geodata)
ind_adm_0 <- gadm(country = "IND", level = 0, path = "./data/")
plot(ind_adm_0)
```

## Create a buffer around India

```{r}
# First convert datatype
class(ind_adm_0)
ind_adm_0_sf <- sf::st_as_sf(ind_adm_0)
ind_adm_0_spdf <- sf::as_Spatial(ind_adm_0_sf)

# Add Buffer
library(rgeos)
ind_adm_0_buf <- gBuffer(ind_adm_0_spdf, width = 1)
plot(ind_adm_0_buf)
```

# Step-3: Merge the DHS data with Climate Data

## Merging with T-max for Multiple Years

```{r extract-t-max-data-for-all-PSUs}
library(raster)
setwd("../../common-datasets/temperature-data/noaa/tmax")
(a <- list.files(pattern ="\\.nc"))
# a <- a[c(2)]

df_psu_tmax = NULL

system.time(
 for (i in a){
    rd0 <- brick(i)                       #load the data in raster format
    #plot(rd0, 1)
    rd1 <- rotate(rd0)                    #convert the LONG from 0:360 to -180:180 degree 
    plot(rd1, 1)
    
    ## Restrict the spatial data to the country boundary 
    cd0 <- crop(x = rd1, y = ind_adm_0_buf)
    cd1 <- rasterize(x = ind_adm_0_buf, y = cd0)
    cd2 <- mask(x = cd0, mask = cd1)
    plot(cd2, 1)
    
   # Extract the climate data for each PSU location
    df1 <- raster::extract(cd2,   # raster layer cropped to the country boundary
           df_dhs_psu_geo_spdf,      # SPDF with centroids for buffer
           df=TRUE)    # return a dataframe

    # Add the PSU information
    df1 <- setDT(cbind(df_dhs_psu_geo_spdf@data, df1))
    
    df2 <- melt(df1, id.vars = c("psu", "lat", "long"), measure = patterns("^X"), 
            variable.name = "date", value.name = "max_temp")

    df2_new <- df2[, date := as.Date(substring(date, 2), format = "%Y.%m.%d")][!is.na(max_temp)]
    
    # bind dataframe to existing data
    df_psu_tmax <- rbindlist(list(df_psu_tmax, df2_new))
    
  }
)
beep(sound = 3)
```

```{r extract-t-min-data-for-all-PSUs}
library(raster)
setwd("../../common-datasets/temperature-data/noaa/tmin")
(a <- list.files(pattern ="\\.nc"))
# a <- a[c(2)]

df_psu_tmin = NULL

system.time(
 for (i in a){
    rd0 <- brick(i)                       #load the data in raster format
    #plot(rd0, 1)
    rd1 <- rotate(rd0)                    #convert the LONG from 0:360 to -180:180 degree 
    plot(rd1, 1)
    
    ## Restrict the spatial data to the country boundary 
    cd0 <- crop(x = rd1, y = ind_adm_0_buf)
    cd1 <- rasterize(x = ind_adm_0_buf, y = cd0)
    cd2 <- mask(x = cd0, mask = cd1)
    plot(cd2, 1)
    
   # Extract the climate data for each PSU location
    df1 <- raster::extract(cd2,   # raster layer cropped to the country boundary
           df_dhs_psu_geo_spdf,      # SPDF with centroids for buffer
           df=TRUE)    # return a dataframe

    # Add the PSU information
    df1 <- setDT(cbind(df_dhs_psu_geo_spdf@data, df1))
    
    df2 <- melt(df1, id.vars = c("psu", "lat", "long"), measure = patterns("^X"), 
            variable.name = "date", value.name = "min_temp")

    df2_new <- df2[, date := as.Date(substring(date, 2), format = "%Y.%m.%d")][!is.na(min_temp)]
    
    # bind dataframe to existing data
    df_psu_tmin <- rbindlist(list(df_psu_tmin, df2_new))
    
  }
)
beep(sound = 3)
```

```{r}
head(df_psu_tmin)
head(df_psu_tmax)
```

# Merge T-min and T-max
## Check dimensions of original datasets
```{r}
dim(df_psu_tmin)
dim(df_psu_tmax)
```
## Perform the merge
```{r}
df_psu_tmax_tmin <- merge(df_psu_tmax, df_psu_tmin, 
                          by.x = c("psu", "date"),
                          by.y = c("psu", "date"),
                          all.x = TRUE, all.y = FALSE)
```

## Clean variables
```{r}
df_psu_tmax_tmin <-  df_psu_tmax_tmin[, .(psu, lat = lat.x, long = long.x, date, max_temp, min_temp)]
```


# Step-4: Save you work

```{r}
save(df_psu_tmax_tmin, file="./bigdata/images-paper-1/1.1.daily-tamx-tmin-1980-22-extracted-dhs-psu.RData")
beep(sound = 3)
```

```{r}
head(df_psu_tmax_tmin)
```

